@model Dictionary<CultureInfo, Dictionary<LocalizedInstanceKey, TranslatedInstanceDN>>
@using System.Globalization
@using Signum.Engine.Translation
@using Signum.Entities.Translation
@using System.Reflection
@using Signum.Utilities
@using Signum.Web.Translation.Controllers
@{
    CultureInfo culture = ViewBag.Culture;
    Type type = ViewBag.Type;

    ViewBag.Title = TranslationMessage.View0In1.NiceToString().Formato(type.NiceName(), culture == null ? TranslationMessage.AllLanguages.NiceToString() : culture.DisplayName);

    Dictionary<LocalizedInstanceKey, string> master = ViewBag.Master;

    var cultures = TranslationLogic.CurrentCultureInfos(TranslatedInstanceLogic.DefaultCulture);

    Func<CultureInfo, bool> editCulture = c => culture == null || culture.Name == c.Name;

    var filter = (string)ViewBag.Filter;

    var all = string.IsNullOrEmpty(filter);

    Func<LocalizedInstanceKey, bool> filtered = li => all ||
        master.GetOrThrow(li).Contains(filter) ||
        cultures.Any(ci => Model.TryGetC(ci).TryGetC(li).Try(t => t.TranslatedText).DefaultText("").Contains(filter));
}
@Html.ScriptCss("~/Translation/Content/Translation.css")



<h2>@ViewBag.Title</h2>

<div>
    @using (Html.BeginForm("View", "TranslatedInstance", FormMethod.Get))
    {
        @Html.Hidden("type")
        @Html.Hidden("culture")
        @Html.TextBox("filter", filter);
        
        <input type="hidden" name="searchPressed" value="true" />
        <input type="submit" value="@TranslationMessage.Search.NiceToString()" />
    }
</div>

@if (Model == null)
{
    <em>@TranslationMessage.PressSearchForResults.NiceToString()</em>
}
else if (Model.IsEmpty())
{
    <strong>@TranslationMessage.NoResultsFound.NiceToString()</strong>  
}
else
{
    using (Html.BeginForm((TranslatedInstanceController c) => c.SaveView(Signum.Engine.Basics.TypeLogic.GetCleanName(type), culture == null ? null : culture.Name, filter)))
    {
    <table id="results" style="width: 100%; margin: 0px" class="st">
        @foreach (var instance in master.Keys.Where(li => master.GetOrThrow(li).HasText()).Where(filtered).GroupBy(a => a.Instance).OrderBy(a => a.Key.Id))
        { 
            <thead>
                <tr>
                    <th class="leftCell">@TranslationMessage.Instance.NiceToString()</th>
                    <th class="titleCell">@Html.Href(Navigator.NavigateRoute(instance.Key), instance.Key.ToString())</th>
                </tr>
            </thead>

            foreach (LocalizedInstanceKey key in instance.OrderBy(a => a.Route.ToString()))
            {     
            <tr>
                <th class="leftCell">@TranslationMessage.Property.NiceToString()
                </th>
                <th>@key.Route.PropertyString()</th>
            </tr>
            
                foreach (var ci in cultures)
                {
                    var formName = ci.Name + "#" + key.Instance.Key() + "#" + key.Route.PropertyString();

                    if (ci.Name == TranslatedInstanceLogic.DefaultCulture)
                    {
            <tr>
                <td class="leftCell">@TranslatedInstanceLogic.DefaultCulture</td>
                <td class="monospaceCell">
                    <em>@master[key]</em>
                    @Html.TextArea(formName, master[key], new { style = "display:none" })
                </td>
            </tr>
                    }
                    else
                    {
                        TranslatedInstanceDN trans = Model.TryGetC(ci).TryGetC(key);

                        if (trans != null || editCulture(ci))
                        {
            <tr>
                <td class="leftCell">@ci.Name</td>
                <td class="monospaceCell">
                    @if (editCulture(ci))
                    {
                        @Html.TextArea(formName, trans.Try(t => t.TranslatedText), new { style = "width:90%;height:16px" })
                    }
                    else
                    {
                        @trans.TranslatedText
                    }
                </td>
            </tr>
                        }
                    }

                }
            }
        }
    </table>
    <input type="submit" value="@TranslationMessage.Save.NiceToString()" />
    }
}
