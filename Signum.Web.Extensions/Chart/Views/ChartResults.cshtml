@using Signum.Entities.DynamicQuery
@using Signum.Entities.Reflection
@using Signum.Engine
@using System.Web.Mvc
@using Signum.Entities
@using Signum.Web
@using Signum.Entities.Chart
@using Signum.Web.Chart
@model TypeContext<ChartRequest>
@{ 
    ResultTable queryResult = (ResultTable)ViewData[ViewDataKeys.Results];
    var mode = (ChartRequestMode)ViewData["mode"];
}
@if(mode == ChartRequestMode.complete)
{
    using(var tabs = Html.Tabs(Model))
    {
        tabs.Tab("sfChartContainer", ChartMessage.Chart.NiceToString(), @<div class="sf-chart-container" 
                data-json="@Html.Json(ChartUtils.DataJson(Model.Value, queryResult)).ToString()">
            </div>);

        tabs.Tab("sfChartData", ChartMessage.Data.NiceToString(), @<text>
            @{Html.RenderPartial(ChartClient.ChartResultsTableView, Model, ViewData);}
        </text>);
    }
}
else if (mode == ChartRequestMode.chart)
{
    <div class="sf-chart-container"data-json="@Html.Json(ChartUtils.DataJson(Model.Value, queryResult)).ToString()">
    </div>
}
else if (mode == ChartRequestMode.data)
{
    Html.RenderPartial(ChartClient.ChartResultsTableView, Model, ViewData);
}
