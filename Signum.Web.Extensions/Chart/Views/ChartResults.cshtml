@using Signum.Entities.DynamicQuery
@using Signum.Entities.Reflection
@using Signum.Engine
@using System.Web.Mvc
@using Signum.Entities
@using Signum.Web
@using Signum.Entities.Chart
@using Signum.Web.Chart
@model TypeContext<ChartRequest>
@{ 
    ResultTable queryResult = (ResultTable)ViewData[ViewDataKeys.Results];
    bool navigate = (bool)ViewData[ViewDataKeys.Navigate];
    var formatters = (Dictionary<int, CellFormatter>)ViewData[ViewDataKeys.Formatters];
}
@if (queryResult == null)
{ 
    @SearchMessage.NoResultsFound.NiceToString()
}
else
{
    using(var tabs = Html.Tabs(Model))
    {
        tabs.Tab("sfChartContainer", ChartMessage.Chart.NiceToString(), @<div class="sf-chart-container" 
                data-open-url="@(Url.Action<ChartController>(cc => cc.OpenSubgroup(Model.Prefix)))"
                data-json="@Html.Json(ChartUtils.DataJson(Model.Value, queryResult)).ToString()">
            </div>);

        tabs.Tab("sfChartData", ChartMessage.Data.NiceToString(), @<text>
            @{Html.RenderPartial(ChartClient.ChartResultsTableView, Model, ViewData);}
        </text>);
    }
}
