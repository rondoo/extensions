@using Signum.Web
@using Signum.Entities.DynamicQuery
@using Signum.Engine.DynamicQuery
@using System.Configuration
@using Signum.Entities.Reflection
@using Signum.Entities
@using Signum.Entities.Chart
@using Signum.Web.Chart
@model TypeContext<ChartRequest>
@Html.ScriptCss("~/Chart/Content/Chart.css")
@{ 
    QueryDescription queryDescription = (QueryDescription)ViewData[ViewDataKeys.QueryDescription];
    if (queryDescription == null)
    {
        queryDescription = DynamicQueryManager.Current.QueryDescription(Model.Value.QueryName);
        ViewData[ViewDataKeys.QueryDescription] = queryDescription;
    }

    List<FilterOption> filterOptions = (List<FilterOption>)ViewData[ViewDataKeys.FilterOptions];

    var entityColumn = queryDescription.Columns.SingleEx(a => a.IsEntity);
    Type entitiesType = entityColumn.Type.CleanType();
}
<div id="@Model.Compose("sfChartControl")" 
    class="sf-search-control sf-chart-control" 
    data-subtokens-url="@Url.Action("NewSubTokensCombo", "Chart")" 
    data-add-filter-url="@Url.Action("AddFilter", "Chart")" 
    data-prefix="@Model.Prefix"
    data-fullscreen-url="@(Url.Action<ChartController>(cc => cc.FullScreen(Model.Prefix)))"
    >
    @Html.HiddenRuntimeInfo(Model)
    @Html.Hidden(Model.Compose("sfOrders"), Model.Value.Orders.IsNullOrEmpty() ? "" :
        (Model.Value.Orders.ToString(oo => (oo.OrderType == OrderType.Ascending ? "" : "-") + oo.Token.FullKey(), ";") + ";"))
    <div>
        @{
            ViewData[ViewDataKeys.FilterOptions] = filterOptions;
            ViewData[ViewDataKeys.QueryTokenSettings] = ChartClient.GetQueryTokenBuilderSettings(queryDescription, Model.Value.GroupResults, isKey: false);
            Html.RenderPartial(Navigator.Manager.FilterBuilderView);
        }

    </div>
    <div id="@Model.Compose("sfChartBuilderContainer")">
        @Html.Partial(ChartClient.ChartBuilderView, Model.Value)
    </div>
    <script type="text/javascript">
        require(["@ChartClient.Module"], function (Chart) {
            var findOptions = @(MvcHtmlString.Create(Model.Value.ToJS().ToString()));
            new Chart.ChartBuilder($('#@Model.Compose("sfChartBuilderContainer")'), $.extend({ prefix: '@Model.Prefix' }, findOptions));
        }); 
    </script>
    <div class="sf-query-button-bar">
        <button type="submit" class="sf-query-button sf-chart-draw btn btn-primary" id="@Model.Compose("qbDraw")" data-url="@(Url.Action<ChartController>(cc => cc.Draw(Model.Prefix)))">@ChartMessage.Chart_Draw.NiceToString()</button>
        <button class="sf-query-button sf-chart-script-edit btn btn-default"  id="@Model.Compose("qbEdit")">@ChartMessage.EditScript.NiceToString()</button>
        @UserChartClient.GetChartMenu(this.ViewContext, Url, queryDescription.QueryName, entitiesType, Model.Prefix, (Lite<UserChartDN>)ViewData["UserChart"]).ToStringButton(Html)
    </div>
    <br />
    <div id="@Model.Compose("divResults")" class="sf-search-results-container">
        @{ Html.RenderPartial(ChartClient.ChartResultsView); }
    </div>
</div>
