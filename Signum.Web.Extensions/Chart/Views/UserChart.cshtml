@using Signum.Web
@using Signum.Entities.DynamicQuery
@using Signum.Engine.DynamicQuery
@using System.Configuration
@using Signum.Entities.Reflection
@using Signum.Entities
@using Signum.Entities.Chart
@using Signum.Web.Chart
@using Signum.Engine.Basics
@using Signum.Entities.UserQueries
@Html.ScriptCss("~/Chart/Content/Chart.css")
<div class="sf-chart-control" 
    data-subtokens-url="@Url.Action("NewSubTokensCombo", "Chart")" 
    data-add-filter-url="@Url.Action("AddFilter", "Chart")" 
    data-prefix="@Model.Prefix">
    @using (var uc = Html.TypeContext<UserChartDN>())
    {
        uc.LabelColumns = new BsColumn(2);

        object queryName = QueryLogic.ToQueryName(uc.Value.Query.Key);

        QueryDescription queryDescription = (QueryDescription)ViewData[ViewDataKeys.QueryDescription];
        if (queryDescription == null)
        {
            queryDescription = DynamicQueryManager.Current.QueryDescription(queryName);
            ViewData[ViewDataKeys.QueryDescription] = queryDescription;
        }
        
        @Html.Hidden("webQueryName", Navigator.ResolveWebQueryName(queryName))

        using (var query = uc.SubContext(tc => tc.Query))
        {
        @Html.HiddenRuntimeInfo(query)
        
        @Html.Hidden(query.Compose("Key"), query.Value.Key)
        @Html.Hidden(query.Compose("Name"), query.Value.Name)

        @Html.FormGroup(uc, null, typeof(Signum.Entities.Basics.QueryDN).NiceName(), Navigator.IsFindable(queryName) ?
                new HtmlTag("a").Class("form-control-static").Attr("href", Navigator.FindRoute(queryName)).InnerHtml(query.Value.Name.EncodeHtml()).ToHtml() :
                Html.Span(null, query.Value.Name, "form-control-static"))
        }
    
        @Html.EntityLine(uc, tc => tc.Owner, el => el.Create = false)
        @Html.ValueLine(uc, tc => tc.DisplayName)
        
        var entityTypePrefix = uc.SubContext(a => a.EntityType).Prefix;
        
        @Html.EntityLine(uc, f => f.EntityType, el =>
   {
       el.AutocompleteUrl = Url.Action("TypeAutocomplete", "Finder");
       el.AttachFunction = ChartClient.Module["attachShowCurrentEntity"](el);
   })
        <p class="messageEntity col-sm-offset-2">
            @UserQueryMessage.Use0ToFilterCurrentEntity.NiceToString().Formato(CurrentEntityConverter.CurrentEntityKey)
        </p>

        <div class="repeater-inline form-inline form-sm sf-filters-list ">
            @Html.EntityRepeater(uc, tc => tc.Filters, er => { er.PreserveViewData = true; er.PartialViewName = "~/Chart/Views/UserChartFilter.cshtml"; })
        </div>

        <div class="repeater-inline form-inline form-sm sf-filters-list">
            @Html.EntityRepeater(uc, tc => tc.Orders, er => { er.PreserveViewData = true; er.PartialViewName = "~/Chart/Views/UserChartOrder.cshtml"; })
        </div>

        <div id="@uc.Compose("sfChartBuilderContainer")">
            @Html.Partial(ChartClient.ChartBuilderView, uc.Value)
        </div>
        
        <script type="text/javascript">
            $(function(){
                require(["@ChartClient.Module"], function(Chart) {
                    new Chart.ChartBuilder($("#@uc.Compose("sfChartBuilderContainer")"), @MvcHtmlString.Create(uc.Value.ToJS().ToString())).ready();
                });
            });
        </script>
    }
</div>
