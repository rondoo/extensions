@using Signum.Engine
@using Signum.Entities.Basics
@using Signum.Entities.DiffLog
@using Signum.Web.Files
@using Signum.Engine.Operations
@using Signum.Web.Translation

@using (var e = Html.TypeContext<OperationLogDN>())
{
    e.LabelColumns = new BsColumn(4);
    <div class="row">
        <div class="col-sm-6">
            @Html.EntityLine(e, f => f.Operation)
        </div>
        <div class="col-sm-6">
            @Html.EntityLine(e, f => f.User)
        </div>
    </div>

    <div class="row">
        <div class="col-sm-6">
            @Html.EntityLine(e, f => f.Target)
        </div>
        <div class="col-sm-6">
            @Html.EntityLine(e, f => f.Origin)
        </div>
    </div>
    
    <div class="row">
        <div class="col-sm-6">
            @Html.ValueLine(e, f => f.Start)
        </div>
        <div class="col-sm-6">
            @Html.ValueLine(e, f => f.End)
        </div>
    </div>
    
    e.LabelColumns = new BsColumn(2);
    if (e.Value.Exception != null)
    {
    @Html.EntityLine(e, f => f.Exception)
    }
    
    <style>
        .colorIcon
        {
            color: black;
            padding: 2px;
        }

            .colorIcon.red
            {
                background: #FF8B8B;
            }

            .colorIcon.mini.red
            {
                background: #FFD1D1;
            }

            .colorIcon.green
            {
                background: #72F272;
            }

            .colorIcon.mini.green
            {
                background: #CEF3CE;
            }

        .nav-tabs > li.linkTab > a:hover
        {
            border-color: transparent;
            background-color: transparent;
        }
    </style>

    using (var diff = e.SubContext(a => a.Mixin<DiffLogMixin>()))
    {
        var minMax = Signum.Engine.DiffLog.DiffLogLogic.OperationLogNextPrev(e.Value);
        
        
        using (var tabs = Html.Tabs(e))
        {
            if (diff.Value.InitialState != null)
            {
                var prev = minMax.Min;

                if (prev != null && prev.Mixin<DiffLogMixin>().FinalState != null)
                {
                    tabs.Tab(new Signum.Web.DiffLog.LinkTab( @<text> 
<span>@DiffLogMessage.PreviousLog.NiceToString()
    <span class="glyphicon glyphicon-new-window"/></span> 
</text> , Navigator.NavigateRoute(prev)) {  ToolTip = DiffLogMessage.NavigatesToThePreviousOperationLog.NiceToString() });
                    
                    var eq = prev.Mixin<DiffLogMixin>().FinalState == diff.Value.InitialState;

                    tabs.Tab(new Tab("diffPrev", @<text>
    <span class="glyphicon glyphicon-fast-backward colorIcon red @(eq ? "mini" : "")"></span>
    <span class="glyphicon glyphicon-step-backward colorIcon green @(eq ? "mini" : "")"></span>
    </text>, 
    @<pre>@TranslationClient.Diff(prev.Mixin<DiffLogMixin>().FinalState, diff.Value.InitialState)</pre>) { ToolTip = DiffLogMessage.DifferenceBetweenFinalStateOfPreviousLogAndTheInitialState.NiceToString() });
                }

                tabs.Tab(new Tab("initialGraph", Html.PropertyNiceName(() => diff.Value.InitialState), 
    @<text><pre><code>@diff.Value.InitialState</code></pre></text>) { ToolTip = DiffLogMessage.StateWhenTheOperationStarted.NiceToString() });
            }

            if (diff.Value.InitialState != null && diff.Value.FinalState != null)
            {
                var eq = diff.Value.InitialState == diff.Value.FinalState;

                tabs.Tab(new Tab("diff", @<text>
    <span class="glyphicon glyphicon-step-backward colorIcon red @(eq ? "mini" : "")"></span>
    <span class="glyphicon glyphicon-step-forward colorIcon green @(eq ? "mini" : "")"></span>
    </text>, 
    @<pre>@TranslationClient.Diff(diff.Value.InitialState, diff.Value.FinalState)</pre>) { Active = true, ToolTip = DiffLogMessage.DifferenceBetweenInitialStateAndFinalState.NiceToString() });
            }

            if (diff.Value.FinalState != null)
            {
                tabs.Tab(new Tab("FinalState", Html.PropertyNiceName(() => diff.Value.FinalState), 
    @<text><pre><code>@diff.Value.FinalState</code></pre></text>) { ToolTip = DiffLogMessage.StateWhenTheOperationFinished.NiceToString() });

                var next = minMax.Max;

                if (next != null && next.Mixin<DiffLogMixin>().InitialState != null)
                {
                    var eq = diff.Value.FinalState == next.Mixin<DiffLogMixin>().InitialState;

                    tabs.Tab(new Tab("diffNext", @<text>
    <span class="glyphicon glyphicon-step-forward colorIcon red @(eq ? "mini" : "")"></span>
    <span class="glyphicon glyphicon-fast-forward colorIcon green @(eq ? "mini" : "")"></span>
    </text>, 
    @<pre>@TranslationClient.Diff(diff.Value.FinalState, next.Mixin<DiffLogMixin>().InitialState)</pre>) { ToolTip = DiffLogMessage.DifferenceBetweenFinalStateAndTheInitialStateOfNextLog.NiceToString() });

                    tabs.Tab(new Signum.Web.DiffLog.LinkTab( @<text> 
<span>@DiffLogMessage.NextLog.NiceToString()
    <span class="glyphicon glyphicon-new-window"/></span> 
</text> , Navigator.NavigateRoute(next)) { ToolTip = DiffLogMessage.NavigatesToTheNextOperationLog.NiceToString() });
                }
                else
                {
                    var entity = (Lite<IdentifiableEntity>)e.Value.Target;

                    var dump = !entity.Exists() ? null : entity.Retrieve().Dump();

                    var eq = diff.Value.FinalState == dump;

                    tabs.Tab(new Tab("diffCurrent", @<text>
    <span class="glyphicon glyphicon-step-forward colorIcon red @(eq ? "mini" : "")"></span>
    <span class="glyphicon glyphicon-fast-forward colorIcon green @(eq ? "mini" : "")"></span>
    </text>, 
    @<pre>@TranslationClient.Diff(diff.Value.FinalState, dump)</pre>) { ToolTip = DiffLogMessage.DifferenceBetweenFinalStateAndTheCurrentStateOfTheEntity.NiceToString() });

                    tabs.Tab(new Signum.Web.DiffLog.LinkTab( @<text> 
<span>@DiffLogMessage.CurrentEntity.NiceToString()
    <span class="glyphicon glyphicon-new-window"/></span> 
</text> , Navigator.NavigateRoute(e.Value.Target)) { ToolTip = DiffLogMessage.NavigatesToTheCurrentEntity.NiceToString() });
                }
            }
        }
    }
}