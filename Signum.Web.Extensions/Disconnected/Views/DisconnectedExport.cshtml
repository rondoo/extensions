@using Signum.Entities.Disconnected

@using (var dc = Html.TypeContext<DisconnectedExportDN>())
{
    @Html.ValueLine(dc, d => d.CreationDate)
    @Html.EntityLine(dc, d => d.Machine)	
    @Html.ValueLine(dc, d => d.State)

    @Html.ValueLine(dc, d => d.Lock)
    @Html.ValueLine(dc, d => d.CreateDatabase)
    @Html.ValueLine(dc, d => d.CreateSchema)
    @Html.ValueLine(dc, d => d.DisableForeignKeys)
    
    <fieldset>
        <legend>@Html.PropertyNiceName(() => dc.Value.Copies)</legend>
        <table>
            <thead>
                <tr>
                    <td>@Html.PropertyNiceName((DisconnectedExportTableDN de) => de.Type)</td>
                    <td>@Html.PropertyNiceName((DisconnectedExportTableDN de) => de.CopyTable)</td>
                </tr>
            </thead>
            @foreach (var dtc in dc.TypeElementContext(a => a.Copies))
            {
                dtc.FormGroupStyle = FormGroupStyle.None;
                <tr>
                    <td>
                        @Html.EntityLine(dtc, d => d.Type)
                    </td>
                    <td>
                        @Html.ValueLine(dtc, d => d.CopyTable)
                    </td>
                </tr>
            }
        </table>
    </fieldset>
    @Html.ValueLine(dc, d => d.EnableForeignKeys)
    @Html.ValueLine(dc, d => d.ReseedIds)
    @Html.ValueLine(dc, d => d.BackupDatabase)
    @Html.ValueLine(dc, d => d.DropDatabase)
    @Html.EntityLine(dc, d => d.Exception)
}
