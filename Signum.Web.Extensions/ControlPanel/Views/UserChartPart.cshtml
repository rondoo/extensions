@using System.Configuration
@using Signum.Entities.ControlPanel
@using Signum.Web.ControlPanel
@using Signum.Entities.DynamicQuery
@using Signum.Entities.Chart
@using Signum.Web.Chart
@using Signum.Engine.Chart
@using Signum.Engine.DynamicQuery


@Html.ScriptCss("~/Chart/Content/Chart.css")

@using (var tc = Html.TypeContext<UserChartPartDN>())
{
    UserChartDN uc = tc.Value.UserChart;
    ChartRequest request = uc.ToRequest();

    using (var crc = new TypeContext<ChartRequest>(request, tc.Prefix))
    {
        var containerId = crc.Compose("sfChartBuilderContainer");

        ResultTable resultTable = ChartLogic.ExecuteChart(request);

    <div id="@crc.Compose("sfChartControl")" class="sf-search-control sf-chart-control" data-prefix="@crc.Prefix">
        <div style="display: none">
            @Html.HiddenRuntimeInfo(crc)
            @Html.Hidden(crc.Compose("sfOrders"), request.Orders.IsNullOrEmpty() ? "" :
                    (request.Orders.ToString(oo => (oo.OrderType == OrderType.Ascending ? "" : "-") + oo.Token.FullKey(), ";") + ";"))
            @{
        ViewData[ViewDataKeys.QueryDescription] = DynamicQueryManager.Current.QueryDescription(request.QueryName);
        ViewData[ViewDataKeys.FilterOptions] = request.Filters.Select(f => new FilterOption { Token = f.Token, Operation = f.Operation, Value = f.Value }).ToList();
            }
            @Html.Partial(Navigator.Manager.FilterBuilderView, crc)
            <div id="@containerId">
                @Html.Partial(ChartClient.ChartBuilderView, crc)
            </div>
            <script type="text/javascript">
                require(["@ChartClient.Module"], function (Chart) {
                     var findOptions = @(MvcHtmlString.Create(uc.ToJS().ToString()));

                     var chartBuilder = new Chart.ChartBuilder($('#@containerId'), $.extend({ prefix: '@crc.Prefix' }, findOptions));

                     @if (!tc.Value.ShowData)
                     {
                         <text>
                     chartBuilder.reDraw();
                        </text>
                     }
                 });
            </script>
        </div>
        <div id="@crc.Compose("sfChartContainer")">
            <div class="sf-chart-container" style="display:@(tc.Value.ShowData ? "none" : "block")" 
                    data-open-url="@(Url.Action<ChartController>(cc => cc.OpenSubgroup(crc.Prefix)))" 
                    data-fullscreen-url="@(Url.Action<ChartController>(cc => cc.FullScreen(crc.Prefix)))"
                    data-json="@Html.Json(ChartUtils.DataJson(crc.Value, resultTable)).ToString()">
            </div>
        </div>
    </div>
                     if (tc.Value.ShowData)
                     {
                         ViewData[ViewDataKeys.Results] = resultTable;
                         ViewData[ViewDataKeys.Navigate] = false;

                         QuerySettings settings = Navigator.QuerySettings(request.QueryName);
                         ViewData[ViewDataKeys.Formatters] = resultTable.Columns.Select((c, i) => new { c, i }).ToDictionary(c => c.i, c => settings.GetFormatter(c.c.Column));

    @Html.Partial(ChartClient.ChartResultsTableView, new TypeContext<ChartRequest>(request, tc.Prefix))
                     }
                     else
                     {
                         MvcHtmlString divSelector = MvcHtmlString.Create("#" + crc.Compose("sfChartContainer") + " > .sf-chart-container");
                     }
    <script type="text/javascript">
        (function () {
            "@crc.Prefix".child("sfFullScreen").get().on("mousedown", function (e) {
                    $("#@containerId").SFControl().fullScreen();
             });
         })();
    </script>
    }
}
