<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<ChartScript GroupBy="Always">
  <Columns>
    <Column DisplayName="Horizontal Axis" ColumnType="Groupable" IsGroupKey="true" />
    <Column DisplayName="Areas" ColumnType="Groupable" IsGroupKey="true" IsOptional="true" />
    <Column DisplayName="Height" ColumnType="Magnitude" />
    <Column DisplayName="Height 2" ColumnType="Magnitude" IsOptional="true" />
    <Column DisplayName="Height 3" ColumnType="Magnitude" IsOptional="true" />
    <Column DisplayName="Height 4" ColumnType="Magnitude" IsOptional="true" />
    <Column DisplayName="Height 5" ColumnType="Magnitude" IsOptional="true" />
  </Columns>
  <Parameters>
    <Parameter Name="Undefined" Type="Enum" ValueDefinition="zero | empty" />
    <Parameter Name="Horizontal Margin" Type="Number" ValueDefinition="20" />
    <Parameter Name="Order" Type="Enum" ValueDefinition="inside-out | reverse | default" />
    <Parameter Name="Stack" Type="Enum" ValueDefinition="zero | expand | wiggle | silhouette" />
    <Parameter Name="Interpolate" Type="Enum" ValueDefinition="linear | step-before | step-after | cardinal | monotone | basis | bundle" />
    <Parameter Name="NumberOpacity" Type="Number" ValueDefinition="0.8" />
    <Parameter Name="NumberColor" Type="String" ValueDefinition="white" />
  </Parameters>
  <Icon FileName="stackedareas.png"><![CDATA[iVBORw0KGgoAAAANSUhEUgAAACgAAAAoCAYAAACM/rhtAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAABUNJREFUeNrsmHtsU1Ucx7+3vW3T9bFWto51g7GtIGxzo9sKiwETwEgixCiC/wiJz0zB+MBABIMKGmOiJBITwJEYcaiwaUxMRCARIg4dG4JDgzCUTZExcGNbt7VZH/d4zu27996uGwj7g5P8eh/nnN/9nO/vnN+5txwhBBO5qDDBy23AGwK46uX6CTsR+Rvp7JEX9xBezWNBTRGeXjGHm1AhfvvDw2TWzCLUzL0LbX/04pWt+8nhlg4yIQD3fttGLlxyIzvLCnAqTC8ugM5gxY5Pj2HXFy3klgM27m/DrDsLIVAUllcJPcnMNMFVXYaW37qxadtBcssAd+5tJkWF+dBotVE4gR2pcSqqpqMAPujx0HO7SV3D2NW8LsBDP54nTSf/Rn7+ZAlc9EjvWSwmOJ2l+Ol0F159/wC5aauYzbGqylLxXAkucq3iOBRSpfv63Lj/qV0pN9gHF89G7QoXlwDIVuHG2oVpp4aPvjxB7HYbTCbDqHCRemZmsxFVrvJwG8j2OXT0DANMDLFGb8HK9XtJ48Ff0wrBwaZzKC6aMia4hLYKcEKStlHALJoi7q6Zje+aO7Bz3/GUkO/UHSEOOvlVNKXcaDiiBMgqdFoNqumc6rzswfLn68mRlgsS0H0HTpP2i/3InmT9X+DYtSIgCecxljZclSWoaziO+q9PJfRo+OYXzHBMk4UT6NOvFy6FghHIEChLtDV0Mv9A08j2z5vFXjtozisosENLlU527PP50H/pLHK66+DxeMYNJ5CUCsZUZA15Xo3yshno7PZiGU20x07+hTx7jqzjQfcQ1ju/wsM1HB4gazHsHhwXXLKCvFyIhSgsEbevvLwc2HNtinOuv68fz+a+CV3uUtFXyRwb8s+twbYrW8FnWMV76cIxBo/XJ1XQ7w/KwqXaIdhxaHAI8/iPkeVYxLK1aJzGiMyyx7DO8R4MQ6fgGxlJG052DhqNJlzu6saVq71jgmPzLsPdivnlmeDUGqYT7RQMG4F+6n1YXdWKSnyGEY83LTjZOajT67H+nlPIF5rR29ufFhy79g1exTMV30NtsIdXWVCEJEIganxmMZbONaPWtgk+r2dUOFkFObpPctTZisp+zNd+gp5/r40KN9A3gNWTN0Fjc8UBCaJFQg0SEI2FPL/kXmws3gLBOwAhEFCES96kVZEFwkbO8XpUldqxyrolBKkANzw4jOW6DTAWLkkAiVlQarQYChbideduZKEDxO+ThVPMgwhDspLjmI819s3o6bkmzrN4OP+IH9OGGzB9VgV93+MVYIQ4RQOJIbc48MLcn1Fi6QQCIxI4eUDx4aqE8BimzMPawncx1HUGXq83mnh5z3ksK/kT6gxbeEBCNLTxIIpqgr56aY1YWX4WLxV/AFWQphTWN2WIxR+pQ53NiXXVB2DuOwIPDat7wI0ns9+CJrsiBsMeIPbzS0BC56EBJyvJ7tnypmNz+XYYOC9U1McoIfbLhkdtLsDj1e3I9TdBJdCX96mLpSAijDxIdBAMKmKsbbifzlqE11yNmGn+h+4aAYWdRAxfWMHQ63GEWvxl4XzU2Umrf6f5zhYCibaJax9/L1aZdCmEHxnrw2lNeKL8BFovtqOxY4EUMBTi2GpLfhgRdweDaCSqAFLDJPVXHkDsvmuKG0XGPdjQt0SqYCQ8Y1ZlLCCydYm+JlkyYDZmyLwsBEfAxSuYZnjSB1EeWIJP9vnB83IhJjEH4wjPeEDS/+ykcEHCQR1JC7KFGzU8EkxZX9zYAS1mHd44ugiJakpz0s0qd1j1seHc/o/6NuAtLv8JMADhVUxtvGMrBgAAAABJRU5ErkJggg==]]></Icon>
  <Script><![CDATA[function DrawChart(chart, data){ 

   var pStack = data.parameters["Stack"];
   var pOrder = data.parameters["Order"];
   var pInterpolate = data.parameters["Interpolate"];
   var pUndefined =   data.parameters["Undefined"];
  
   var dim0, series, title;
  
   if(data.columns.c1.token == null)
   {   
      dim0 = data.rows.map(function(r){return r.c0;});     
      series = ['c2', 'c3','c4','c5','c6']
        .filter(function(cn){return data.columns[cn].token != undefined; })
        .map(function(cn){
           var col = data.columns[cn];
            return {
              key : cn,
              color : null,
              niceName : col.title,
              points : data.rows.map(function(r){
                var v = r[cn];
                return {
                  rowClick : r,
                  value: v,
                  niceToString : v == null ? null: (r.c0.niceToString() + ', ' + col.title + ': ' + v.niceToString()),
                  dim0 : r.c0,
                };
              }) 
            };        
        });
    
     title = ['c2', 'c3','c4','c5','c6']
        .filter(function(cn){return data.columns[cn].token != undefined; })
        .map(function(cn){return data.columns[cn].title; })
        .join(" | ")
   }
   else
   {
      var errors = ['c3','c4','c5','c6']
        .filter(function(cn){return data.columns[cn].token != undefined; })
        .map(function(cn){return "'" + data.columns[cn].displayName + "'"; });
     
     if(errors.length > 0)
      throw errors.join() + " not compatible with '" + data.columns.c1.displayName + "'";  
    
     dim0 = d3.nest()
      .key(function(r){return r.c0.toString(); })
      .rollup(function(r){return r[0].c0 })
      .entries(data.rows)
      .map(function(g){return g.values;});

  
     series = d3.nest()
      .key(function(r){return r.c1; })
      .rollup(function(list){ 
        var obj = d3.nest()
            .key(function(r){return r.c0.toString(); })
            .rollup(function(r){return r[0] })
            .map(list);
        
        var c1 = list[0].c1;
        return {
          key : c1.key,
          color: c1.color,
          niceName : c1.niceToString(),
          points : dim0.map(function(dim0){ 
            var row = obj[dim0];
            return {
              rowClick: row, 
              value: row == null ? null: row.c2,
              niceToString : row == null ? null: (row.c0.niceToString() + ', ' + row.c1.niceToString() + ': ' + row.c2.niceToString()),
              dim0: dim0
          	}; })
        };
      })
      .entries(data.rows)
      .map(function(g){return g.values;});
     
     title = data.columns.c2.title + " / " + data.columns.c1.title
   }
  
  var xRule = rule({
    _1 : 5,
   title : 15,
   _2 : 10, 
   labels : parseInt(data.parameters["Horizontal Margin"]),
   _3 : 5,
   ticks: 4,
   content: '*',
   _4: 10,
 }, width);
  //xRule.debugX(chart)
  
  var yRule = rule({
    _1 : 5,
    legend : 15,
    _2 : 5,
    content: '*',
    ticks: 4,
    _3 : 5,
    labels0: 15,
    labels1: 15,
    _4 : 10,
    title: 15,
    _5 : 5,
  }, height);
  //yRule.debugY(chart);
  
  var x = d3.scale.ordinal()
      .domain($.map(dim0, function (d) { return d; }))
      .rangeBands([0, xRule.size('content')]);
  
  var stack = d3.layout.stack()
    .offset(pStack)
    .order(pOrder)
    .values(function(d) { return d.points; })
    .y(function(p){return p.value == undefined ? 0: p.value;})
    .x(function(p){return x(p.dim0);});
  
  
  var a = stack(series);
  

  var max = d3.max(series, function(s){ return d3.max(s.points, function(v){return v.y0 + v.y;}); });
  
  var y = d3.scale.linear()
      .domain([0, max])
      .range([0, yRule.size('content')]);
  
  chart.append('svg:g').attr('class', 'x-tick').attr('transform', translate(xRule.start('content')+ (x.rangeBand() / 2), yRule.start('ticks')))
    .enterData(dim0, 'line', 'x-tick')
      .attr('y2',  function (d, i) { return yRule.start('labels' + (i % 2)) - yRule.start('ticks'); })
      .attr('x1', function (d) { return x(d); })
      .attr('x2', function (d) { return x(d); })
      .style('stroke', 'Black');
  
  if ((x.rangeBand() * 2) > 60)     
  {
    chart.append('svg:g').attr('class', 'x-label').attr('transform', translate(xRule.start('content')+ (x.rangeBand() / 2), yRule.middle('labels0')))
      .enterData(dim0, 'text', 'x-label')
        .attr('x', function (d) { return x(d); })
        .attr('y', function (d, i) { return yRule.middle('labels' + (i % 2)) - yRule.middle('labels0'); })
        .attr('dominant-baseline', 'middle')
        .attr('text-anchor', 'middle')
        .text(function (d) { return d.niceToString(); })
        .each(function (v) { ellipsis(this, x.rangeBand() * 2); });
  }
  
  chart.append('svg:g').attr('class', 'x-title').attr('transform', translate(xRule.middle('content'), yRule.middle('title')))
    .append('svg:text').attr('class', 'x-title')
    .attr('text-anchor', 'middle')
    .attr('dominant-baseline', 'middle')
    .text(data.columns.c0.title);

 
  
  var yTicks = y.ticks(10);  
  chart.append('svg:g').attr('class', 'y-line').attr('transform', translate(xRule.start('content'), yRule.end('content')))
    .enterData(yTicks, 'line', 'y-line')
    .attr('x2', xRule.size('content'))
    .attr('y1', function (t) { return -y(t); })
    .attr('y2', function (t) { return -y(t); })
    .style('stroke', 'LightGray');
  
  chart.append('svg:g').attr('class', 'y-tick').attr('transform', translate(xRule.start('ticks'), yRule.end('content')))
    .enterData(yTicks, 'line', 'y-tick')
    .attr('x2', xRule.size('ticks'))
    .attr('y1', function (t) { return -y(t); })
    .attr('y2', function (t) { return -y(t); })
    .style('stroke', 'Black');
  

  var formatter = pStack == "expand" ? function(t){return (t*100 + "%");} : 
    		      pStack == "zero" ? function(t){return t;} : 
                    function(t){return t + "?";};
                    
  chart.append('svg:g').attr('class', 'y-label').attr('transform',  translate(xRule.end('labels'), yRule.end('content')))
    .enterData(yTicks, 'text', 'y-label')
    .attr('y', function (t) { return -y(t); })
    .attr('dominant-baseline', 'middle')
    .attr('text-anchor', 'end')
    .text(formatter);
   
  
  chart.append('svg:g').attr('class', 'y-label').attr('transform', translate(xRule.middle('title'), yRule.middle('content')) + rotate(270))
    .append('svg:text').attr('class', 'y-label')
      .attr('text-anchor', 'middle')
      .attr('dominant-baseline', 'middle')
      .text(title);
  
  var color =  d3.scale.category20().domain($.map(series, function (s) { return s.key; }));
  
  var area = d3.svg.area()
    .x(function(v) { return x(v.dim0); })
    .y0(function(v) { return -y(v.y0); })
    .y1(function(v) { return -y(v.y) -y(v.y0); })
    .interpolate(pInterpolate); 
  
  
  if(pUndefined != "zero")
    area.defined(function(v) {return v.value !== undefined;});
  
  //paint graph
  chart.enterData(series, 'g', 'shape-serie').attr('transform', translate(xRule.start('content') + x.rangeBand() / 2, yRule.end('content')))
    .append('svg:path').attr('class', 'shape')
      .attr('stroke', function (s) { return s.color || color(s.key); })
      .attr('fill', function (s) { return s.color || color(s.key); })
      .attr('shape-rendering', 'initial')
      .attr('d',   function (s) { return area(s.points);})
      .append('svg:title')
      .text(function (s) { return s.niceName; })
      
      var rectRadious = 2; 
  
  //paint graph - hover area trigger
  chart.enterData(series, 'g', 'hover-trigger-serie').attr('transform', translate(xRule.start('content') + x.rangeBand() / 2, yRule.end('content')))
   .each(function(s){
     
     d3.select(this).enterData(function (s) { return s.points; }, 'rect', 'point')
      .filter(function(v) {return v.value != undefined;})
      .attr('x', function(v) { return x(v.dim0) - rectRadious; })
      .attr('y', function(v) { return -y(v.y) -y(v.y0); })
      .attr('width', 2 * rectRadious)
      .attr('height', function(v) { return y(v.y); } )
      .attr('fill', '#fff')
      .attr('fill-opacity', .1)
      .attr('stroke', 'none')
      .attr('data-click', function(v) { return getClickKeys(v.rowClick, data.columns); })
      .append('svg:title')
      .text(function(v) { return v.niceToString; });
     
     if (x.rangeBand() > 15 && data.parameters["NumberOpacity"] > 0 )
      {
        d3.select(this).enterData(function (s) { return s.points; }, 'text', 'number-label')
        .filter(function(r) {return r.value != undefined && y(r.y) > 10;})
        .attr('x', function (r) { return x(r.dim0) })
        .attr('y', function (r) { return -y(r.y)*0.5 -y(r.y0); })
        .attr('fill', data.parameters["NumberColor"])
        .attr('dominant-baseline', 'central')
        .attr('opacity', data.parameters["NumberOpacity"])
        .attr('text-anchor', 'middle')
        .attr('font-weight', 'bold')
        .text(function (r) { return r.value; })     
        .attr('data-click', function(v) { return getClickKeys(v.rowClick, data.columns); })
      	.append('svg:title')
      	.text(function(v) { return v.niceToString; });;
      }
   });
  
  var legendScale = d3.scale.ordinal()
      .domain($.map(series, function (s, i) { return i; }))
      .rangeBands([0, xRule.size('content')]);
  
  if (legendScale.rangeBand() > 50) {
    
        var legendMargin = yRule.size('legend') + 4;
        
        chart.append('svg:g').attr('class', 'color-legend').attr('transform', translate(xRule.start('content'), yRule.start('legend')))
          .enterData(series, 'rect', 'color-rect')
          .attr('x', function (e, i) { return legendScale(i); })
          .attr('width', yRule.size('legend'))
          .attr('height', yRule.size('legend'))
          .attr('fill', function (s) { return s.color || color(s.key); });
        
        chart.append('svg:g').attr('class', 'color-legend').attr('transform',  translate(xRule.start('content') + legendMargin, yRule.middle('legend') + 1))
          .enterData(series, 'text', 'color-text')
            .attr('x', function (e, i) { return legendScale(i); })
            .attr('dominant-baseline', 'middle')
            .text(function (s) { return s.niceName; })
            .each(function (s) { ellipsis(this, legendScale.rangeBand() - legendMargin); });
      }
  
  chart.append('svg:g').attr('class', 'x-axis').attr('transform', translate(xRule.start('content'), yRule.end('content')))
    .append('svg:line')
    .attr('class', 'x-axis')
    .attr('x2', xRule.size('content'))
    .style('stroke', 'Black');
  
  chart.append('svg:g').attr('class', 'y-axis').attr('transform', translate(xRule.start('content'), yRule.start('content')))
    .append('svg:line')
    .attr('class', 'y-axis')
    .attr('y2', yRule.size('content'))
    .style('stroke', 'Black'); 
  
}]]></Script>
</ChartScript>